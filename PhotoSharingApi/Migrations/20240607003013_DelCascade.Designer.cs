// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoSharingApi.DAL;

#nullable disable

namespace PhotoSharingApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240607003013_DelCascade")]
    partial class DelCascade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.Album", b =>
                {
                    b.Property<int>("album_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("album_id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("album_id");

                    b.HasIndex("user_id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.Category", b =>
                {
                    b.Property<int>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("category_id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("category_id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.Comment", b =>
                {
                    b.Property<int>("comment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("comment_id"));

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("commented_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("photo_id")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("comment_id");

                    b.HasIndex("photo_id");

                    b.HasIndex("user_id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.Photo", b =>
                {
                    b.Property<int>("photo_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("photo_id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("geolocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("posted_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("photo_id");

                    b.HasIndex("user_id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.PhotoAlbum", b =>
                {
                    b.Property<int>("photo_id")
                        .HasColumnType("int");

                    b.Property<int>("album_id")
                        .HasColumnType("int");

                    b.HasKey("photo_id", "album_id");

                    b.HasIndex("album_id");

                    b.ToTable("PhotoAlbums");
                });

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.PhotoCategory", b =>
                {
                    b.Property<int>("photo_id")
                        .HasColumnType("int");

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.HasKey("photo_id", "category_id");

                    b.HasIndex("category_id");

                    b.ToTable("PhotoCategories");
                });

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("is_moderator")
                        .HasColumnType("int");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.Album", b =>
                {
                    b.HasOne("PhotoSharingApi.DAL.Models.User", "User")
                        .WithMany("Albums")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.Comment", b =>
                {
                    b.HasOne("PhotoSharingApi.DAL.Models.Photo", "Photo")
                        .WithMany("Comments")
                        .HasForeignKey("photo_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotoSharingApi.DAL.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.Photo", b =>
                {
                    b.HasOne("PhotoSharingApi.DAL.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.PhotoAlbum", b =>
                {
                    b.HasOne("PhotoSharingApi.DAL.Models.Album", "Album")
                        .WithMany("PhotoAlbums")
                        .HasForeignKey("album_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotoSharingApi.DAL.Models.Photo", "Photo")
                        .WithMany("PhotoAlbums")
                        .HasForeignKey("photo_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.PhotoCategory", b =>
                {
                    b.HasOne("PhotoSharingApi.DAL.Models.Category", "Category")
                        .WithMany("PhotoCategories")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotoSharingApi.DAL.Models.Photo", "Photo")
                        .WithMany("PhotoCategories")
                        .HasForeignKey("photo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.Album", b =>
                {
                    b.Navigation("PhotoAlbums");
                });

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.Category", b =>
                {
                    b.Navigation("PhotoCategories");
                });

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.Photo", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PhotoAlbums");

                    b.Navigation("PhotoCategories");
                });

            modelBuilder.Entity("PhotoSharingApi.DAL.Models.User", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Comments");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
